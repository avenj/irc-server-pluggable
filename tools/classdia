#!/usr/bin/env perl

## This is UML::Class::Simple umlclass.pl, just tweaked to drop Mooish bits
## when generating diagrams.
##
## https://metacpan.org/release/UML-Class-Simple
## See original authors + copyright notice after __END__

use strictures 1;

use File::Slurp;

use YAML::Syck;

use Getopt::Long;

use File::Spec;

use UML::Class::Simple;

my $ext_regex = qr/(?:\.pl|\.pm)$/i;

my $outfile = 'a.png';
my $dot_prog = $ENV{'UMLCLASS_DOT'} || 'dot';

GetOptions(
    "color|c=s"     => \my $node_color,
    "help|h"        => \my $help,
    "without-inherited-methods" => \my $without_inherited_methods,
    "M=s"           => \my @preload_modules,
    "out|o=s"       => \$outfile,
    "P|public-only" => \my $public_only,
    "pattern|p=s"   => \my $pattern,
    "recursive|r"   => \(my $recursive = 1),
    "size|s=s"      => \my $size,
    "dot=s"         => \$dot_prog,
    "include|I=s"   => \my @include_paths,
    "exclude|E=s"   => \my @exclude_paths,
) or help(1);


help(0) if $help;

unshift @INC, @include_paths;

foreach my $mod (@preload_modules) {
    my $loc = $mod . ".pm";
    $loc =~ s{::}{/}gsmx;
    eval { require $loc; };
    if ($@) { warn "can't pre-load $mod: $@\n"; }
}

my ($width, $height);
if ($size) {
    if ($size !~ /(?x) ([\d\.]+) x ([\d\.]+) /) {
        die "error: -s or --size option only takes argument like 3.2x5 and 7x3\n";
    }
    ($width, $height) = ($1, $2);
}

my @infiles = sort map { -d $_ ? all_in($_) : $_ } map glob, @ARGV;

my @plfiles = grep { !/(?:\.dot|\.yml)$/i } @infiles;
for my $plfile (@plfiles) {
    if (!-e $plfile) {
        die "error: input file $plfile not found.\n";
    }
}

my $painter;

if (!@plfiles) {
    if (@infiles) {
        my $file = pop @infiles;
        if ($file =~ /\.dot$/i) {
            $painter = UML::Class::Simple->new;
            $painter->set_dot(read_file($file));
        }
        elsif ($file =~ /\.yml$/i) {
            $painter = UML::Class::Simple->new;
            my $dom = LoadFile($file);
            $painter->set_dom($dom);
        }
    }
} else {
    if (@plfiles != @infiles) {
        die "error: perl source files are not allowed when ",
            ".yml or .dot files are also given.\n";
    }
}

if (!$painter) {
    my @classes;
    @classes = classes_from_runtime(\@preload_modules, $pattern) if !@plfiles;
    push @classes, classes_from_files(\@plfiles, $pattern) if @plfiles;
    if (@classes) {
        if (@include_paths) {
            @classes = grep_by_paths(\@classes, @include_paths);
        }
        if (@exclude_paths) {
            @classes = exclude_by_paths(\@classes, @exclude_paths);
        }
        if (!@classes) {
            die "error: no class found.\n";
        }
        print join("\n", sort @classes), "\n\n";
        $painter = UML::Class::Simple->new(\@classes);
    } else {
        die "error: no class found.\n";
    }
}

use IRC::Server::Pluggable::Constants;
use IRC::Server::Pluggable::Types;
use IRC::Server::Pluggable::Utils;
my @skipmethods = (
  qw/
    has with extends requires
    before after around
    carp cluck confess croak
  /,

  @IRC::Server::Pluggable::Constants::EXPORT,
  @IRC::Server::Pluggable::Types::EXPORT,
  @IRC::Server::Pluggable::Utils::EXPORT,
);

my @skipclasses = qw/
  IRC::Server::Pluggable::Constants
  IRC::Server::Pluggable::Types
  IRC::Server::Pluggable::Utils
/;

sub is_ok_method {
  my ($meth) = @_;
  return if grep { $_ eq $meth } @skipmethods;
  1
}

sub is_ok_class {
  my ($cls) = @_;
  return if grep { $_ eq $cls } @skipclasses;
  1
}

my $tree = $painter->as_dom;
my @classes = @{ $tree->{classes} };
my $i;
my $newtree = { classes => [] };
for my $cref (@classes) {
  ++$i;

  next unless is_ok_class($cref->{name});

  my @methods = @{ $cref->{methods} };

  $cref->{methods} = [ grep { is_ok_method($_) } @methods  ];

  push(@{ $newtree->{classes} }, $cref )
}

$painter->set_dom($newtree);

$painter->dot_prog($dot_prog);
$painter->public_only($public_only) if $public_only;
$painter->inherited_methods(0) if $without_inherited_methods;
$painter->size($width, $height) if $width and $height;
$painter->node_color($node_color) if $node_color;

my $ext = 'png';
if ($outfile =~ /\.(\w+)$/) { $ext = lc($1); }

if ($ext eq 'png') {
    $painter->as_png($outfile);
}
elsif ($ext eq 'gif') {
    $painter->as_gif($outfile);
}
elsif ($ext eq 'dot') {
    $painter->as_dot($outfile);
}
elsif ($ext eq 'yml') {
    my $dom = $painter->as_dom;
    DumpFile($outfile, $dom);
}
elsif ($ext eq 'xmi') {
    $painter->as_xmi($outfile);
}
else {
    die "error: unknown output file format: $ext\n";
}

print "$outfile generated.\n" if $outfile;

sub help {
    my $code = shift;
    warn <<"_EOC_";
Usage: $0 [-M module] [-o outfile] [-p regex] [infile... indir...]
    infile...    Perl source files, .pm, .pl, .yml, or .dot file, or
                 .yml files containing the class info DOM. They're
                 optional.
    indir...     Directory containing perl source files. They're
                 optional too.
Options:
    --color color
    -c color     Set the node color. Defaults to "#f1e1f4".

    --dot path   Tell it where to find the graphviz program "dot"

    --exclude path
    -E path
                 exclude modules that were installed to <path> from
                 the drawing. multiple -E options are supported.

    --help
    -h           Print this help.

    -M module    Preload the specified module to runtime.
                 (multiple -M are supported.)

    --include path
    -I path
                 Include *only* the classes that were installed to
                 <path> in the drawing. multiple -I options are supported.

    --out outfile
    -o outfile   Specify the output file name. it can be one of the
                 following types: .png, .dot, .xmi and .yml. Defaults
                 to a.png.

    --public-only
                 Show public methods only.

    --pattern regex
    -p regex     Specify the perl regex as the pattern used to
                 filter out classes to be drawn.

    --recursive
    -r           Process subdirectories of indir recursively.

    --size <w>x<h>
    -s <w>x<h>   Specify the width and height (in inches) for the
                 output images. For instance, 3.2x6.3 and 4x8.

    --without-inherited-methods
                 Do not show methods from parent classes.

Report bugs or wishlist to Agent Zhang <agentzh\@gmail.com>.
_EOC_
    exit($code);
}

# Stolen directly from 'prove'
sub all_in {
    my $start = shift;
    my @hits = ();

    local *DH;
    if ( opendir( DH, $start ) ) {
        my @files = sort readdir DH;
        closedir DH;
        for my $file ( @files ) {
            next if $file eq File::Spec->updir || $file eq File::Spec->curdir;
            next if $file eq ".svn";
            next if $file eq "CVS";

            my $currfile = File::Spec->catfile( $start, $file );
            if ( -d $currfile ) {
                push( @hits, all_in( $currfile ) ) if $recursive;
            } else {
                push( @hits, $currfile ) if $currfile =~ $ext_regex;
            }
        }
    } else {
        warn "$start: $!\n";
    }

    return @hits;
}

__END__

Original authors:

Agent Zhang
Maxim Zenin

Copyright 2006 by Agent Zhang. All rights reserved.

This library is free software; you can redistribute it and/or modify it under
the same terms as perl itself.
